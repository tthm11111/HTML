/*
Student Name: Tianyi Chen
Student Number:041056592
Course & Section #: 22S_CST8288
Declaration:
This is my own original work and is free from Plagiarism.
*/
package dataaccesslayer;

/**
 *
 * @author tthm1
 */
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import transferobjects.ReceipistDTO;

import java.util.ArrayList;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

/**
 * Implementation of the ReceipistDAO interface.
 */
public class ReceipistDaolmpl implements ReceipistDAO{
    
        @Override
        public String getMetadata(){
             StringBuilder stringBuilder = new StringBuilder();
        try {
            DataSource ds = new DataSource();
            Connection con = ds.createConnection();
            PreparedStatement pstmt = con.prepareStatement("SELECT * FROM ontario.recipients");
            ResultSet rs = pstmt.executeQuery();
            ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            stringBuilder.append("Column Name\tColumn Type\tColumn Class\n");
            stringBuilder.append("---------------------------------------------\n");
            for (int i = 1; i <= columnCount; i++) {
                String columnName = rsmd.getColumnName(i);
                String columnType = rsmd.getColumnTypeName(i);
                String columnClass = rsmd.getColumnClassName(i);

                stringBuilder.append(String.format("%-20s\t%-20s\t%-20s\n", columnName, columnType, columnClass));
            }
            
            rs.close();
            pstmt.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return stringBuilder.toString();
    
        }

	@Override
	public List<ReceipistDTO> getAllReceipists() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<ReceipistDTO> receipists = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT AwardID, Name, Year, City, Category FROM ontario.recipients ORDER BY AwardID");
			rs = pstmt.executeQuery();
			receipists = new ArrayList<ReceipistDTO>();
			while(rs.next()){
				ReceipistDTO receipist = new ReceipistDTO();
                                receipist.setAwardID(rs.getInt("AwardID"));
                                receipist.setName(rs.getString("Name"));
                                receipist.setYear(rs.getInt("Year"));
                                receipist.setCity(rs.getString("City"));
                                receipist.setCategory(rs.getString("Category"));
                                receipists.add(receipist);
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return receipists;
	}

	@Override
	public ReceipistDTO getReceipistsById(Integer ID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ReceipistDTO receipist = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT AwardID, name, year, city, category FROM ontario.recipients WHERE AwardID = ?");
			pstmt.setInt(1, ID.intValue());
			rs = pstmt.executeQuery();
			while(rs.next()){
				receipist = new ReceipistDTO();
                                receipist.setAwardID(rs.getInt("AwardID"));
                                receipist.setName(rs.getString("name"));
                                receipist.setYear(rs.getInt("year"));
                                receipist.setCity(rs.getString("city"));
                                receipist.setCategory(rs.getString("category"));
                                
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return receipist;
	}

	@Override
	public void addReceipist(ReceipistDTO receipist) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			// do not insert AuthorID, it is generated by Database
			pstmt = con.prepareStatement(
					"INSERT INTO ontario.recipients (name, year, city, category) " +
			        "VALUES(?, ?, ?, ?)");
                        pstmt.setString(1, receipist.getName());
                        pstmt.setInt(2, receipist.getYear());
                        pstmt.setString(3, receipist.getCity());
                        pstmt.setString(4, receipist.getCategory());
                        
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}

	@Override
	public void updateReceipists(ReceipistDTO receipist) {
			Connection con = null;
			PreparedStatement pstmt = null;
			try{
				DataSource ds = new DataSource();
				con = ds.createConnection();
				pstmt = con.prepareStatement(
						"UPDATE ontario.recipients SET name = ?, " + "year = ?, " + "city = ?, " +
				        "category = ? WHERE AwardID = ?");
                                
                                pstmt.setString(1, receipist.getName());
                                pstmt.setInt(2, receipist.getYear());
                                pstmt.setString(3, receipist.getCity());
                                pstmt.setString(4, receipist.getCategory());
                                pstmt.setInt(5, receipist.getAwardID());
				pstmt.executeUpdate();
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			finally{
				try{ if(pstmt != null){ pstmt.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
				try{ if(con != null){ con.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
			}
	}

	@Override
	public void deleteReceipists(ReceipistDTO receipist) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"DELETE FROM ontario.recipients WHERE AwardID = ?");	
			pstmt.setInt(1, receipist.getAwardID());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
}
